{"version":3,"sources":["fragment-matcher.ts","utilities/reduceArtists.ts","apollo.config.ts","constants/index.ts","utilities/getCognitoUserToken.ts","generated/graphql.tsx","hooks/useAnimations.ts","contexts/AuthenticationProvider.context.tsx","pages/Albums/index.tsx","pages/Artists/index.tsx","pages/Home/index.tsx","pages/NotFound/index.tsx","pages/Playlists/index.tsx","pages/Songs/index.tsx","containers/ViewAlbum/index.tsx","containers/App/routes.ts","components/GoBackButton/index.tsx","components/Header/index.tsx","components/Logo/styles.ts","containers/App/index.tsx","contexts/index.tsx","serviceWorker.ts","index.tsx"],"names":["result","reduceArtists","artists","length","map","artist","name","reduce","previousValue","currentValue","currentIndex","array","cache","InMemoryCache","possibleTypes","introspectionResult","httpLink","HttpLink","uri","process","authLink","setContext","_","headers","token","localUser","localStorage","getItem","APP_NAME","cognitoUser","sessionStorage","JSON","parse","accessToken","getCognitoUserToken","authorization","retryLink","RetryLink","clientLink","from","Privacy","Enum_Album_Releasetype","CacheControlScope","client","ApolloClient","link","persistedClient","a","persistCache","storage","window","TrackFragmentDoc","gql","AlbumFragmentDoc","ArtistFragmentDoc","AlbumsDocument","AlbumDocument","useAlbumQuery","baseOptions","ApolloReactHooks","ArtistsDocument","TracksDocument","useAnimations","useFadeIn","useSpring","opacity","useFadeUp","transform","to","DEFAULT_STATE","authenticating","isAuthenticated","forgotPassword","_email","resetPassword","_code","_password","_passwordConfirmation","signIn","_rememberMe","signUp","_username","signOut","Context","React","createContext","Provider","children","useLocalStorage","useSessionStorage","sessionUser","useState","setAuthenticating","setIsAuthenticated","email","code","password","passwordConfirmation","error","username","useEffect","value","Albums","data","fetchPolicy","Helmet","style","gridTemplateColumns","gridGap","padding","width","albums","album","key","id","aspect","src","artwork","url","alignItems","backgroundColor","fontSize","textAlign","Truncate","lines","Artists","variables","sort","avatar","Home","margin","marginBottom","label","index","borderBottom","borderTop","borderColor","paddingY","NotFound","Playlists","regex","template","expressions","match","expression","replace","trim","templateParts","split","placeholder","subject","school","initialValues","onSubmit","display","pitch","forEach","part","push","color","cursor","size","renderPitch","Songs","tracks","track","paddingX","flexDirection","flex","marginRight","featuring","Fragment","explicit","fontWeight","lineHeight","marginLeft","paddingBottom","paddingLeft","paddingRight","Explicit","height","justifyContent","letterSpacing","position","right","top","routes","exact","component","path","title","breadcrumb","useParams","trackNumber","params","GoBackButton","show","history","useHistory","backButtonTrans","useTransition","enter","leave","item","styleProps","props","onClick","goBack","Header","slicedBreadcrumbs","useBreadcrumbs","slice","subtitle","as","minWidth","defaultProps","spin","keyframes","App","styled","Box","gridTemplateRows","overflow","AppProvider","Boolean","location","hostname","renderApp","ReactDOM","render","document","getElementById","then","catch","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PA+SqBA,EAvJyB,CAC5C,cAAiB,CACf,MAAS,CACP,qBACA,yBACA,+BACA,iCACA,QACA,kBACA,kBACA,eACA,oBACA,4BACA,4BACA,sBACA,6BACA,uBACA,yBACA,0BACA,6BACA,qBACA,qBACA,qBACA,SACA,mBACA,mBACA,gBACA,qBACA,6BACA,6BACA,uBACA,wBACA,yBACA,sBACA,sBACA,sBACA,gBACA,0BACA,0BACA,uBACA,4BACA,oCACA,oCACA,iCACA,+BACA,6BACA,6BACA,6BACA,WACA,qBACA,qBACA,wBACA,wBACA,wBACA,wBACA,kBACA,uBACA,+BACA,+BACA,0BACA,4BACA,kCACA,4BACA,gCACA,6BACA,yBACA,8BACA,4BACA,wBACA,wBACA,wBACA,QACA,kBACA,kBACA,qBACA,qBACA,qBACA,qBACA,eACA,oBACA,4BACA,4BACA,sBACA,0BACA,0BACA,uBACA,6BACA,4BACA,4BACA,uBACA,qBACA,qBACA,qBACA,aACA,uBACA,uBACA,0BACA,0BACA,0BACA,0BACA,oBACA,yBACA,iCACA,iCACA,2BACA,sCACA,8BACA,4BACA,6BACA,8BACA,2BACA,0BACA,2BACA,2BACA,0BACA,iCACA,+BACA,wCACA,6BACA,uBACA,iCACA,iCACA,8BACA,mCACA,qCACA,4CACA,qCACA,oBACA,oBACA,oBACA,uBACA,iCACA,iCACA,8BACA,mCACA,2CACA,2CACA,yCACA,sCACA,yCACA,0CACA,wCACA,qCACA,0CACA,yCACA,oBACA,oBACA,uBCzSOC,EAAgB,SAC3BC,GAEA,OAAKA,GAAWA,EAAQC,OAAS,EACxB,KAGFD,EACJE,KAAI,SAACC,GAAD,cAAYA,QAAZ,IAAYA,OAAZ,EAAYA,EAAQC,QACxBC,QAAO,SAACC,EAAeC,EAAcC,EAAcC,GAA5C,MAA2D,CACjEH,EACAE,IAAiBC,EAAMR,OAAS,EAAI,MAAQ,KAC5CM,OCEAG,EAAQ,IAAIC,IAAc,CAC9BC,cAAeC,EAAoBD,gBAG/BE,EAAW,IAAIC,IAAS,CAC5BC,ICrB8BC,kCDwB1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","file":"static/js/main.95e9134f.chunk.js","sourcesContent":["\n      export type PossibleTypesResultData = {\n  \"possibleTypes\": {\n    \"Morph\": [\n      \"UsersPermissionsMe\",\n      \"UsersPermissionsMeRole\",\n      \"UsersPermissionsLoginPayload\",\n      \"UserPermissionsPasswordPayload\",\n      \"Album\",\n      \"AlbumConnection\",\n      \"AlbumAggregator\",\n      \"AlbumGroupBy\",\n      \"AlbumConnectionId\",\n      \"AlbumConnectionCreated_at\",\n      \"AlbumConnectionUpdated_at\",\n      \"AlbumConnectionName\",\n      \"AlbumConnectionReleaseDate\",\n      \"AlbumConnectionAlias\",\n      \"AlbumConnectionArtwork\",\n      \"AlbumConnectionExplicit\",\n      \"AlbumConnectionReleaseType\",\n      \"createAlbumPayload\",\n      \"updateAlbumPayload\",\n      \"deleteAlbumPayload\",\n      \"Artist\",\n      \"ArtistConnection\",\n      \"ArtistAggregator\",\n      \"ArtistGroupBy\",\n      \"ArtistConnectionId\",\n      \"ArtistConnectionCreated_at\",\n      \"ArtistConnectionUpdated_at\",\n      \"ArtistConnectionName\",\n      \"ArtistConnectionAlias\",\n      \"ArtistConnectionAvatar\",\n      \"createArtistPayload\",\n      \"updateArtistPayload\",\n      \"deleteArtistPayload\",\n      \"PlaylistTrack\",\n      \"PlaylistTrackConnection\",\n      \"PlaylistTrackAggregator\",\n      \"PlaylistTrackGroupBy\",\n      \"PlaylistTrackConnectionId\",\n      \"PlaylistTrackConnectionCreated_at\",\n      \"PlaylistTrackConnectionUpdated_at\",\n      \"PlaylistTrackConnectionAddedBy\",\n      \"PlaylistTrackConnectionTrack\",\n      \"createPlaylistTrackPayload\",\n      \"updatePlaylistTrackPayload\",\n      \"deletePlaylistTrackPayload\",\n      \"Playlist\",\n      \"PlaylistConnection\",\n      \"PlaylistAggregator\",\n      \"PlaylistAggregatorSum\",\n      \"PlaylistAggregatorAvg\",\n      \"PlaylistAggregatorMin\",\n      \"PlaylistAggregatorMax\",\n      \"PlaylistGroupBy\",\n      \"PlaylistConnectionId\",\n      \"PlaylistConnectionCreated_at\",\n      \"PlaylistConnectionUpdated_at\",\n      \"PlaylistConnectionAlias\",\n      \"PlaylistConnectionArtwork\",\n      \"PlaylistConnectionCollaborative\",\n      \"PlaylistConnectionCreator\",\n      \"PlaylistConnectionDescription\",\n      \"PlaylistConnectionDuration\",\n      \"PlaylistConnectionName\",\n      \"PlaylistConnectionNumTracks\",\n      \"PlaylistConnectionPrivacy\",\n      \"createPlaylistPayload\",\n      \"updatePlaylistPayload\",\n      \"deletePlaylistPayload\",\n      \"Track\",\n      \"TrackConnection\",\n      \"TrackAggregator\",\n      \"TrackAggregatorSum\",\n      \"TrackAggregatorAvg\",\n      \"TrackAggregatorMin\",\n      \"TrackAggregatorMax\",\n      \"TrackGroupBy\",\n      \"TrackConnectionId\",\n      \"TrackConnectionCreated_at\",\n      \"TrackConnectionUpdated_at\",\n      \"TrackConnectionName\",\n      \"TrackConnectionExplicit\",\n      \"TrackConnectionDuration\",\n      \"TrackConnectionAlbum\",\n      \"TrackConnectionTrackNumber\",\n      \"TrackConnectionDiscNumber\",\n      \"TrackConnectionIsPlayable\",\n      \"TrackConnectionAudio\",\n      \"createTrackPayload\",\n      \"updateTrackPayload\",\n      \"deleteTrackPayload\",\n      \"UploadFile\",\n      \"UploadFileConnection\",\n      \"UploadFileAggregator\",\n      \"UploadFileAggregatorSum\",\n      \"UploadFileAggregatorAvg\",\n      \"UploadFileAggregatorMin\",\n      \"UploadFileAggregatorMax\",\n      \"UploadFileGroupBy\",\n      \"UploadFileConnectionId\",\n      \"UploadFileConnectionCreated_at\",\n      \"UploadFileConnectionUpdated_at\",\n      \"UploadFileConnectionName\",\n      \"UploadFileConnectionAlternativeText\",\n      \"UploadFileConnectionCaption\",\n      \"UploadFileConnectionWidth\",\n      \"UploadFileConnectionHeight\",\n      \"UploadFileConnectionFormats\",\n      \"UploadFileConnectionHash\",\n      \"UploadFileConnectionExt\",\n      \"UploadFileConnectionMime\",\n      \"UploadFileConnectionSize\",\n      \"UploadFileConnectionUrl\",\n      \"UploadFileConnectionPreviewUrl\",\n      \"UploadFileConnectionProvider\",\n      \"UploadFileConnectionProvider_metadata\",\n      \"UsersPermissionsPermission\",\n      \"UsersPermissionsRole\",\n      \"UsersPermissionsRoleConnection\",\n      \"UsersPermissionsRoleAggregator\",\n      \"UsersPermissionsRoleGroupBy\",\n      \"UsersPermissionsRoleConnectionId\",\n      \"UsersPermissionsRoleConnectionName\",\n      \"UsersPermissionsRoleConnectionDescription\",\n      \"UsersPermissionsRoleConnectionType\",\n      \"createRolePayload\",\n      \"updateRolePayload\",\n      \"deleteRolePayload\",\n      \"UsersPermissionsUser\",\n      \"UsersPermissionsUserConnection\",\n      \"UsersPermissionsUserAggregator\",\n      \"UsersPermissionsUserGroupBy\",\n      \"UsersPermissionsUserConnectionId\",\n      \"UsersPermissionsUserConnectionCreated_at\",\n      \"UsersPermissionsUserConnectionUpdated_at\",\n      \"UsersPermissionsUserConnectionUsername\",\n      \"UsersPermissionsUserConnectionEmail\",\n      \"UsersPermissionsUserConnectionProvider\",\n      \"UsersPermissionsUserConnectionConfirmed\",\n      \"UsersPermissionsUserConnectionBlocked\",\n      \"UsersPermissionsUserConnectionRole\",\n      \"UsersPermissionsUserConnectionFirstName\",\n      \"UsersPermissionsUserConnectionLastName\",\n      \"createUserPayload\",\n      \"updateUserPayload\",\n      \"deleteUserPayload\"\n    ]\n  }\n};\n      const result: PossibleTypesResultData = {\n  \"possibleTypes\": {\n    \"Morph\": [\n      \"UsersPermissionsMe\",\n      \"UsersPermissionsMeRole\",\n      \"UsersPermissionsLoginPayload\",\n      \"UserPermissionsPasswordPayload\",\n      \"Album\",\n      \"AlbumConnection\",\n      \"AlbumAggregator\",\n      \"AlbumGroupBy\",\n      \"AlbumConnectionId\",\n      \"AlbumConnectionCreated_at\",\n      \"AlbumConnectionUpdated_at\",\n      \"AlbumConnectionName\",\n      \"AlbumConnectionReleaseDate\",\n      \"AlbumConnectionAlias\",\n      \"AlbumConnectionArtwork\",\n      \"AlbumConnectionExplicit\",\n      \"AlbumConnectionReleaseType\",\n      \"createAlbumPayload\",\n      \"updateAlbumPayload\",\n      \"deleteAlbumPayload\",\n      \"Artist\",\n      \"ArtistConnection\",\n      \"ArtistAggregator\",\n      \"ArtistGroupBy\",\n      \"ArtistConnectionId\",\n      \"ArtistConnectionCreated_at\",\n      \"ArtistConnectionUpdated_at\",\n      \"ArtistConnectionName\",\n      \"ArtistConnectionAlias\",\n      \"ArtistConnectionAvatar\",\n      \"createArtistPayload\",\n      \"updateArtistPayload\",\n      \"deleteArtistPayload\",\n      \"PlaylistTrack\",\n      \"PlaylistTrackConnection\",\n      \"PlaylistTrackAggregator\",\n      \"PlaylistTrackGroupBy\",\n      \"PlaylistTrackConnectionId\",\n      \"PlaylistTrackConnectionCreated_at\",\n      \"PlaylistTrackConnectionUpdated_at\",\n      \"PlaylistTrackConnectionAddedBy\",\n      \"PlaylistTrackConnectionTrack\",\n      \"createPlaylistTrackPayload\",\n      \"updatePlaylistTrackPayload\",\n      \"deletePlaylistTrackPayload\",\n      \"Playlist\",\n      \"PlaylistConnection\",\n      \"PlaylistAggregator\",\n      \"PlaylistAggregatorSum\",\n      \"PlaylistAggregatorAvg\",\n      \"PlaylistAggregatorMin\",\n      \"PlaylistAggregatorMax\",\n      \"PlaylistGroupBy\",\n      \"PlaylistConnectionId\",\n      \"PlaylistConnectionCreated_at\",\n      \"PlaylistConnectionUpdated_at\",\n      \"PlaylistConnectionAlias\",\n      \"PlaylistConnectionArtwork\",\n      \"PlaylistConnectionCollaborative\",\n      \"PlaylistConnectionCreator\",\n      \"PlaylistConnectionDescription\",\n      \"PlaylistConnectionDuration\",\n      \"PlaylistConnectionName\",\n      \"PlaylistConnectionNumTracks\",\n      \"PlaylistConnectionPrivacy\",\n      \"createPlaylistPayload\",\n      \"updatePlaylistPayload\",\n      \"deletePlaylistPayload\",\n      \"Track\",\n      \"TrackConnection\",\n      \"TrackAggregator\",\n      \"TrackAggregatorSum\",\n      \"TrackAggregatorAvg\",\n      \"TrackAggregatorMin\",\n      \"TrackAggregatorMax\",\n      \"TrackGroupBy\",\n      \"TrackConnectionId\",\n      \"TrackConnectionCreated_at\",\n      \"TrackConnectionUpdated_at\",\n      \"TrackConnectionName\",\n      \"TrackConnectionExplicit\",\n      \"TrackConnectionDuration\",\n      \"TrackConnectionAlbum\",\n      \"TrackConnectionTrackNumber\",\n      \"TrackConnectionDiscNumber\",\n      \"TrackConnectionIsPlayable\",\n      \"TrackConnectionAudio\",\n      \"createTrackPayload\",\n      \"updateTrackPayload\",\n      \"deleteTrackPayload\",\n      \"UploadFile\",\n      \"UploadFileConnection\",\n      \"UploadFileAggregator\",\n      \"UploadFileAggregatorSum\",\n      \"UploadFileAggregatorAvg\",\n      \"UploadFileAggregatorMin\",\n      \"UploadFileAggregatorMax\",\n      \"UploadFileGroupBy\",\n      \"UploadFileConnectionId\",\n      \"UploadFileConnectionCreated_at\",\n      \"UploadFileConnectionUpdated_at\",\n      \"UploadFileConnectionName\",\n      \"UploadFileConnectionAlternativeText\",\n      \"UploadFileConnectionCaption\",\n      \"UploadFileConnectionWidth\",\n      \"UploadFileConnectionHeight\",\n      \"UploadFileConnectionFormats\",\n      \"UploadFileConnectionHash\",\n      \"UploadFileConnectionExt\",\n      \"UploadFileConnectionMime\",\n      \"UploadFileConnectionSize\",\n      \"UploadFileConnectionUrl\",\n      \"UploadFileConnectionPreviewUrl\",\n      \"UploadFileConnectionProvider\",\n      \"UploadFileConnectionProvider_metadata\",\n      \"UsersPermissionsPermission\",\n      \"UsersPermissionsRole\",\n      \"UsersPermissionsRoleConnection\",\n      \"UsersPermissionsRoleAggregator\",\n      \"UsersPermissionsRoleGroupBy\",\n      \"UsersPermissionsRoleConnectionId\",\n      \"UsersPermissionsRoleConnectionName\",\n      \"UsersPermissionsRoleConnectionDescription\",\n      \"UsersPermissionsRoleConnectionType\",\n      \"createRolePayload\",\n      \"updateRolePayload\",\n      \"deleteRolePayload\",\n      \"UsersPermissionsUser\",\n      \"UsersPermissionsUserConnection\",\n      \"UsersPermissionsUserAggregator\",\n      \"UsersPermissionsUserGroupBy\",\n      \"UsersPermissionsUserConnectionId\",\n      \"UsersPermissionsUserConnectionCreated_at\",\n      \"UsersPermissionsUserConnectionUpdated_at\",\n      \"UsersPermissionsUserConnectionUsername\",\n      \"UsersPermissionsUserConnectionEmail\",\n      \"UsersPermissionsUserConnectionProvider\",\n      \"UsersPermissionsUserConnectionConfirmed\",\n      \"UsersPermissionsUserConnectionBlocked\",\n      \"UsersPermissionsUserConnectionRole\",\n      \"UsersPermissionsUserConnectionFirstName\",\n      \"UsersPermissionsUserConnectionLastName\",\n      \"createUserPayload\",\n      \"updateUserPayload\",\n      \"deleteUserPayload\"\n    ]\n  }\n};\n      export default result;\n    ","import { Artist, Maybe } from \"../generated/graphql\";\n\nexport const reduceArtists = (\n  artists?: Maybe<Pick<Artist, \"name\">>[] | null\n) => {\n  if (!artists || artists.length < 1) {\n    return null;\n  }\n\n  return artists\n    .map((artist) => artist?.name)\n    .reduce((previousValue, currentValue, currentIndex, array): any => [\n      previousValue,\n      currentIndex === array.length - 1 ? \" & \" : \", \",\n      currentValue,\n    ]);\n};\n","import {\n  ApolloClient,\n  errorLink,\n  from,\n  HttpLink,\n  InMemoryCache,\n  loggerLink,\n  RetryLink,\n  setContext,\n} from \"@paisidevs/tra-apollo\";\nimport { persistCache } from \"apollo-cache-persist\";\nimport { PersistentStorage } from \"apollo-cache-persist/types\";\nimport { GRAPHQL_ENDPOINT, NODE_ENV } from \"./constants\";\nimport introspectionResult from \"./fragment-matcher\";\nimport { getCognitoUserToken } from \"./utilities\";\n\nconst cache = new InMemoryCache({\n  possibleTypes: introspectionResult.possibleTypes,\n});\n\nconst httpLink = new HttpLink({\n  uri: GRAPHQL_ENDPOINT,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from (local/session) storage if it exists\n  const token = getCognitoUserToken();\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst retryLink = new RetryLink();\n\nlet clientLink = from([retryLink, authLink, httpLink]);\n\nif (NODE_ENV === \"development\") {\n  clientLink = from([loggerLink, errorLink, clientLink]);\n}\n\nexport const client = new ApolloClient({\n  cache,\n  link: clientLink,\n});\n\nexport const persistedClient = async () => {\n  await persistCache({\n    cache,\n    storage: window.localStorage as PersistentStorage<string | null>,\n  });\n\n  return client;\n};\n","export const GRAPHQL_ENDPOINT = process.env.REACT_APP_GRAPHQL_ENDPOINT;\nexport const NODE_ENV = process.env.NODE_ENV;\n\nexport const APP_NAME = 'tra';\nexport const COGNITO_USER_STORAGE_KEY = APP_NAME + ':cognitoUser';\n","import { COGNITO_USER_STORAGE_KEY } from '../constants';\n\n/**\n * Gets JWT of authenticatedUser from either sessionStorage or localStorage\n */\nexport const getCognitoUserToken = () => {\n  const localUser = localStorage.getItem(COGNITO_USER_STORAGE_KEY);\n  const sessionUser = sessionStorage.getItem(COGNITO_USER_STORAGE_KEY);\n  const cognitoUser = sessionUser || localUser;\n\n  return cognitoUser ? JSON.parse(cognitoUser).accessToken : null;\n};\n","// THIS FILE IS GENERATED, DO NOT EDIT!\nimport { gql } from '@apollo/client';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nexport type Maybe<T> = T | null;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  DateTime: any;\n  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  Date: any;\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSON: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n  /** A time string with format: HH:mm:ss.SSS */\n  Time: any;\n  /** The `Long` scalar type represents 52-bit integers */\n  Long: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  album?: Maybe<Album>;\n  albums?: Maybe<Array<Maybe<Album>>>;\n  albumsConnection?: Maybe<AlbumConnection>;\n  artist?: Maybe<Artist>;\n  artists?: Maybe<Array<Maybe<Artist>>>;\n  artistsConnection?: Maybe<ArtistConnection>;\n  playlistTrack?: Maybe<PlaylistTrack>;\n  playlistTracks?: Maybe<Array<Maybe<PlaylistTrack>>>;\n  playlistTracksConnection?: Maybe<PlaylistTrackConnection>;\n  playlist?: Maybe<Playlist>;\n  playlists?: Maybe<Array<Maybe<Playlist>>>;\n  playlistsConnection?: Maybe<PlaylistConnection>;\n  track?: Maybe<Track>;\n  tracks?: Maybe<Array<Maybe<Track>>>;\n  tracksConnection?: Maybe<TrackConnection>;\n  files?: Maybe<Array<Maybe<UploadFile>>>;\n  filesConnection?: Maybe<UploadFileConnection>;\n  role?: Maybe<UsersPermissionsRole>;\n  /** Retrieve all the existing roles. You can't apply filters on this query. */\n  roles?: Maybe<Array<Maybe<UsersPermissionsRole>>>;\n  rolesConnection?: Maybe<UsersPermissionsRoleConnection>;\n  user?: Maybe<UsersPermissionsUser>;\n  users?: Maybe<Array<Maybe<UsersPermissionsUser>>>;\n  usersConnection?: Maybe<UsersPermissionsUserConnection>;\n  me?: Maybe<UsersPermissionsMe>;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryAlbumsConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryArtistsConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryPlaylistTrackArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryPlaylistTracksArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryPlaylistTracksConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryPlaylistArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryPlaylistsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryPlaylistsConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryTrackArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTracksArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryTracksConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryFilesArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryFilesConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryRoleArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryRolesConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type QueryUsersConnectionArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\nexport type Album = {\n  __typename?: 'Album';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  name?: Maybe<Scalars['String']>;\n  releaseDate?: Maybe<Scalars['Date']>;\n  alias?: Maybe<Scalars['String']>;\n  artwork?: Maybe<UploadFile>;\n  explicit?: Maybe<Scalars['Boolean']>;\n  releaseType?: Maybe<Enum_Album_Releasetype>;\n  artists?: Maybe<Array<Maybe<Artist>>>;\n  tracks?: Maybe<Array<Maybe<Track>>>;\n};\n\n\nexport type AlbumArtistsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type AlbumTracksArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\n\nexport type UploadFile = {\n  __typename?: 'UploadFile';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  name: Scalars['String'];\n  alternativeText?: Maybe<Scalars['String']>;\n  caption?: Maybe<Scalars['String']>;\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n  formats?: Maybe<Scalars['JSON']>;\n  hash: Scalars['String'];\n  ext?: Maybe<Scalars['String']>;\n  mime: Scalars['String'];\n  size: Scalars['Float'];\n  url: Scalars['String'];\n  previewUrl?: Maybe<Scalars['String']>;\n  provider: Scalars['String'];\n  provider_metadata?: Maybe<Scalars['JSON']>;\n  related?: Maybe<Array<Maybe<Morph>>>;\n};\n\n\nexport type UploadFileRelatedArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Album | AlbumConnection | AlbumAggregator | AlbumGroupBy | AlbumConnectionId | AlbumConnectionCreated_At | AlbumConnectionUpdated_At | AlbumConnectionName | AlbumConnectionReleaseDate | AlbumConnectionAlias | AlbumConnectionArtwork | AlbumConnectionExplicit | AlbumConnectionReleaseType | CreateAlbumPayload | UpdateAlbumPayload | DeleteAlbumPayload | Artist | ArtistConnection | ArtistAggregator | ArtistGroupBy | ArtistConnectionId | ArtistConnectionCreated_At | ArtistConnectionUpdated_At | ArtistConnectionName | ArtistConnectionAlias | ArtistConnectionAvatar | CreateArtistPayload | UpdateArtistPayload | DeleteArtistPayload | PlaylistTrack | PlaylistTrackConnection | PlaylistTrackAggregator | PlaylistTrackGroupBy | PlaylistTrackConnectionId | PlaylistTrackConnectionCreated_At | PlaylistTrackConnectionUpdated_At | PlaylistTrackConnectionAddedBy | PlaylistTrackConnectionTrack | CreatePlaylistTrackPayload | UpdatePlaylistTrackPayload | DeletePlaylistTrackPayload | Playlist | PlaylistConnection | PlaylistAggregator | PlaylistAggregatorSum | PlaylistAggregatorAvg | PlaylistAggregatorMin | PlaylistAggregatorMax | PlaylistGroupBy | PlaylistConnectionId | PlaylistConnectionCreated_At | PlaylistConnectionUpdated_At | PlaylistConnectionAlias | PlaylistConnectionArtwork | PlaylistConnectionCollaborative | PlaylistConnectionCreator | PlaylistConnectionDescription | PlaylistConnectionDuration | PlaylistConnectionName | PlaylistConnectionNumTracks | PlaylistConnectionPrivacy | CreatePlaylistPayload | UpdatePlaylistPayload | DeletePlaylistPayload | Track | TrackConnection | TrackAggregator | TrackAggregatorSum | TrackAggregatorAvg | TrackAggregatorMin | TrackAggregatorMax | TrackGroupBy | TrackConnectionId | TrackConnectionCreated_At | TrackConnectionUpdated_At | TrackConnectionName | TrackConnectionExplicit | TrackConnectionDuration | TrackConnectionAlbum | TrackConnectionTrackNumber | TrackConnectionDiscNumber | TrackConnectionIsPlayable | TrackConnectionAudio | CreateTrackPayload | UpdateTrackPayload | DeleteTrackPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_At | UploadFileConnectionUpdated_At | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_Metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | CreateRolePayload | UpdateRolePayload | DeleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_At | UsersPermissionsUserConnectionUpdated_At | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionLastName | CreateUserPayload | UpdateUserPayload | DeleteUserPayload;\n\nexport type UsersPermissionsMe = {\n  __typename?: 'UsersPermissionsMe';\n  id: Scalars['ID'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  confirmed?: Maybe<Scalars['Boolean']>;\n  blocked?: Maybe<Scalars['Boolean']>;\n  role?: Maybe<UsersPermissionsMeRole>;\n};\n\nexport type UsersPermissionsMeRole = {\n  __typename?: 'UsersPermissionsMeRole';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type UsersPermissionsLoginPayload = {\n  __typename?: 'UsersPermissionsLoginPayload';\n  jwt: Scalars['String'];\n  user: UsersPermissionsMe;\n};\n\nexport type UserPermissionsPasswordPayload = {\n  __typename?: 'UserPermissionsPasswordPayload';\n  ok: Scalars['Boolean'];\n};\n\nexport type AlbumConnection = {\n  __typename?: 'AlbumConnection';\n  values?: Maybe<Array<Maybe<Album>>>;\n  groupBy?: Maybe<AlbumGroupBy>;\n  aggregate?: Maybe<AlbumAggregator>;\n};\n\nexport type AlbumGroupBy = {\n  __typename?: 'AlbumGroupBy';\n  id?: Maybe<Array<Maybe<AlbumConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<AlbumConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<AlbumConnectionUpdated_At>>>;\n  name?: Maybe<Array<Maybe<AlbumConnectionName>>>;\n  releaseDate?: Maybe<Array<Maybe<AlbumConnectionReleaseDate>>>;\n  alias?: Maybe<Array<Maybe<AlbumConnectionAlias>>>;\n  artwork?: Maybe<Array<Maybe<AlbumConnectionArtwork>>>;\n  explicit?: Maybe<Array<Maybe<AlbumConnectionExplicit>>>;\n  releaseType?: Maybe<Array<Maybe<AlbumConnectionReleaseType>>>;\n};\n\nexport type AlbumConnectionId = {\n  __typename?: 'AlbumConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionCreated_At = {\n  __typename?: 'AlbumConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionUpdated_At = {\n  __typename?: 'AlbumConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionName = {\n  __typename?: 'AlbumConnectionName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionReleaseDate = {\n  __typename?: 'AlbumConnectionReleaseDate';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionAlias = {\n  __typename?: 'AlbumConnectionAlias';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionArtwork = {\n  __typename?: 'AlbumConnectionArtwork';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionExplicit = {\n  __typename?: 'AlbumConnectionExplicit';\n  key?: Maybe<Scalars['Boolean']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumConnectionReleaseType = {\n  __typename?: 'AlbumConnectionReleaseType';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<AlbumConnection>;\n};\n\nexport type AlbumAggregator = {\n  __typename?: 'AlbumAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type CreateAlbumPayload = {\n  __typename?: 'createAlbumPayload';\n  album?: Maybe<Album>;\n};\n\nexport type UpdateAlbumPayload = {\n  __typename?: 'updateAlbumPayload';\n  album?: Maybe<Album>;\n};\n\nexport type DeleteAlbumPayload = {\n  __typename?: 'deleteAlbumPayload';\n  album?: Maybe<Album>;\n};\n\nexport type Artist = {\n  __typename?: 'Artist';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  name?: Maybe<Scalars['String']>;\n  alias?: Maybe<Scalars['String']>;\n  avatar?: Maybe<UploadFile>;\n  albums?: Maybe<Array<Maybe<Album>>>;\n  featuresIn?: Maybe<Array<Maybe<Track>>>;\n  tracks?: Maybe<Array<Maybe<Track>>>;\n};\n\n\nexport type ArtistAlbumsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type ArtistFeaturesInArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type ArtistTracksArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\nexport type Track = {\n  __typename?: 'Track';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  name?: Maybe<Scalars['String']>;\n  explicit?: Maybe<Scalars['Boolean']>;\n  duration?: Maybe<Scalars['Int']>;\n  album?: Maybe<Album>;\n  trackNumber?: Maybe<Scalars['Int']>;\n  discNumber?: Maybe<Scalars['Int']>;\n  isPlayable?: Maybe<Scalars['Boolean']>;\n  audio?: Maybe<UploadFile>;\n  artists?: Maybe<Array<Maybe<Artist>>>;\n  featuring?: Maybe<Array<Maybe<Artist>>>;\n};\n\n\nexport type TrackArtistsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type TrackFeaturingArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\nexport type ArtistConnection = {\n  __typename?: 'ArtistConnection';\n  values?: Maybe<Array<Maybe<Artist>>>;\n  groupBy?: Maybe<ArtistGroupBy>;\n  aggregate?: Maybe<ArtistAggregator>;\n};\n\nexport type ArtistGroupBy = {\n  __typename?: 'ArtistGroupBy';\n  id?: Maybe<Array<Maybe<ArtistConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<ArtistConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<ArtistConnectionUpdated_At>>>;\n  name?: Maybe<Array<Maybe<ArtistConnectionName>>>;\n  alias?: Maybe<Array<Maybe<ArtistConnectionAlias>>>;\n  avatar?: Maybe<Array<Maybe<ArtistConnectionAvatar>>>;\n};\n\nexport type ArtistConnectionId = {\n  __typename?: 'ArtistConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<ArtistConnection>;\n};\n\nexport type ArtistConnectionCreated_At = {\n  __typename?: 'ArtistConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<ArtistConnection>;\n};\n\nexport type ArtistConnectionUpdated_At = {\n  __typename?: 'ArtistConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<ArtistConnection>;\n};\n\nexport type ArtistConnectionName = {\n  __typename?: 'ArtistConnectionName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<ArtistConnection>;\n};\n\nexport type ArtistConnectionAlias = {\n  __typename?: 'ArtistConnectionAlias';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<ArtistConnection>;\n};\n\nexport type ArtistConnectionAvatar = {\n  __typename?: 'ArtistConnectionAvatar';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<ArtistConnection>;\n};\n\nexport type ArtistAggregator = {\n  __typename?: 'ArtistAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type CreateArtistPayload = {\n  __typename?: 'createArtistPayload';\n  artist?: Maybe<Artist>;\n};\n\nexport type UpdateArtistPayload = {\n  __typename?: 'updateArtistPayload';\n  artist?: Maybe<Artist>;\n};\n\nexport type DeleteArtistPayload = {\n  __typename?: 'deleteArtistPayload';\n  artist?: Maybe<Artist>;\n};\n\nexport type PlaylistTrack = {\n  __typename?: 'PlaylistTrack';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  addedBy?: Maybe<UsersPermissionsUser>;\n  track?: Maybe<Track>;\n};\n\nexport type UsersPermissionsUser = {\n  __typename?: 'UsersPermissionsUser';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  provider?: Maybe<Scalars['String']>;\n  confirmed?: Maybe<Scalars['Boolean']>;\n  blocked?: Maybe<Scalars['Boolean']>;\n  role?: Maybe<UsersPermissionsRole>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  playlists?: Maybe<Array<Maybe<Playlist>>>;\n};\n\n\nexport type UsersPermissionsUserPlaylistsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\nexport type UsersPermissionsRole = {\n  __typename?: 'UsersPermissionsRole';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  permissions?: Maybe<Array<Maybe<UsersPermissionsPermission>>>;\n  users?: Maybe<Array<Maybe<UsersPermissionsUser>>>;\n};\n\n\nexport type UsersPermissionsRolePermissionsArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\n\nexport type UsersPermissionsRoleUsersArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\nexport type UsersPermissionsPermission = {\n  __typename?: 'UsersPermissionsPermission';\n  id: Scalars['ID'];\n  type: Scalars['String'];\n  controller: Scalars['String'];\n  action: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  policy?: Maybe<Scalars['String']>;\n  role?: Maybe<UsersPermissionsRole>;\n};\n\nexport type Playlist = {\n  __typename?: 'Playlist';\n  id: Scalars['ID'];\n  created_at: Scalars['DateTime'];\n  updated_at: Scalars['DateTime'];\n  alias?: Maybe<Scalars['String']>;\n  artwork?: Maybe<UploadFile>;\n  collaborative?: Maybe<Scalars['Boolean']>;\n  creator?: Maybe<UsersPermissionsUser>;\n  description?: Maybe<Scalars['String']>;\n  duration?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  numTracks?: Maybe<Scalars['Int']>;\n  privacy?: Maybe<Privacy>;\n  tracks?: Maybe<Array<Maybe<PlaylistTrack>>>;\n};\n\n\nexport type PlaylistTracksArgs = {\n  sort?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  start?: Maybe<Scalars['Int']>;\n  where?: Maybe<Scalars['JSON']>;\n};\n\nexport enum Privacy {\n  Private = 'Private',\n  Public = 'Public',\n  Unlisted = 'Unlisted'\n}\n\nexport type PlaylistTrackConnection = {\n  __typename?: 'PlaylistTrackConnection';\n  values?: Maybe<Array<Maybe<PlaylistTrack>>>;\n  groupBy?: Maybe<PlaylistTrackGroupBy>;\n  aggregate?: Maybe<PlaylistTrackAggregator>;\n};\n\nexport type PlaylistTrackGroupBy = {\n  __typename?: 'PlaylistTrackGroupBy';\n  id?: Maybe<Array<Maybe<PlaylistTrackConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<PlaylistTrackConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<PlaylistTrackConnectionUpdated_At>>>;\n  addedBy?: Maybe<Array<Maybe<PlaylistTrackConnectionAddedBy>>>;\n  track?: Maybe<Array<Maybe<PlaylistTrackConnectionTrack>>>;\n};\n\nexport type PlaylistTrackConnectionId = {\n  __typename?: 'PlaylistTrackConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<PlaylistTrackConnection>;\n};\n\nexport type PlaylistTrackConnectionCreated_At = {\n  __typename?: 'PlaylistTrackConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<PlaylistTrackConnection>;\n};\n\nexport type PlaylistTrackConnectionUpdated_At = {\n  __typename?: 'PlaylistTrackConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<PlaylistTrackConnection>;\n};\n\nexport type PlaylistTrackConnectionAddedBy = {\n  __typename?: 'PlaylistTrackConnectionAddedBy';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<PlaylistTrackConnection>;\n};\n\nexport type PlaylistTrackConnectionTrack = {\n  __typename?: 'PlaylistTrackConnectionTrack';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<PlaylistTrackConnection>;\n};\n\nexport type PlaylistTrackAggregator = {\n  __typename?: 'PlaylistTrackAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type CreatePlaylistTrackPayload = {\n  __typename?: 'createPlaylistTrackPayload';\n  playlistTrack?: Maybe<PlaylistTrack>;\n};\n\nexport type UpdatePlaylistTrackPayload = {\n  __typename?: 'updatePlaylistTrackPayload';\n  playlistTrack?: Maybe<PlaylistTrack>;\n};\n\nexport type DeletePlaylistTrackPayload = {\n  __typename?: 'deletePlaylistTrackPayload';\n  playlistTrack?: Maybe<PlaylistTrack>;\n};\n\nexport type PlaylistConnection = {\n  __typename?: 'PlaylistConnection';\n  values?: Maybe<Array<Maybe<Playlist>>>;\n  groupBy?: Maybe<PlaylistGroupBy>;\n  aggregate?: Maybe<PlaylistAggregator>;\n};\n\nexport type PlaylistGroupBy = {\n  __typename?: 'PlaylistGroupBy';\n  id?: Maybe<Array<Maybe<PlaylistConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<PlaylistConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<PlaylistConnectionUpdated_At>>>;\n  alias?: Maybe<Array<Maybe<PlaylistConnectionAlias>>>;\n  artwork?: Maybe<Array<Maybe<PlaylistConnectionArtwork>>>;\n  collaborative?: Maybe<Array<Maybe<PlaylistConnectionCollaborative>>>;\n  creator?: Maybe<Array<Maybe<PlaylistConnectionCreator>>>;\n  description?: Maybe<Array<Maybe<PlaylistConnectionDescription>>>;\n  duration?: Maybe<Array<Maybe<PlaylistConnectionDuration>>>;\n  name?: Maybe<Array<Maybe<PlaylistConnectionName>>>;\n  numTracks?: Maybe<Array<Maybe<PlaylistConnectionNumTracks>>>;\n  privacy?: Maybe<Array<Maybe<PlaylistConnectionPrivacy>>>;\n};\n\nexport type PlaylistConnectionId = {\n  __typename?: 'PlaylistConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionCreated_At = {\n  __typename?: 'PlaylistConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionUpdated_At = {\n  __typename?: 'PlaylistConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionAlias = {\n  __typename?: 'PlaylistConnectionAlias';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionArtwork = {\n  __typename?: 'PlaylistConnectionArtwork';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionCollaborative = {\n  __typename?: 'PlaylistConnectionCollaborative';\n  key?: Maybe<Scalars['Boolean']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionCreator = {\n  __typename?: 'PlaylistConnectionCreator';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionDescription = {\n  __typename?: 'PlaylistConnectionDescription';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionDuration = {\n  __typename?: 'PlaylistConnectionDuration';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionName = {\n  __typename?: 'PlaylistConnectionName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionNumTracks = {\n  __typename?: 'PlaylistConnectionNumTracks';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistConnectionPrivacy = {\n  __typename?: 'PlaylistConnectionPrivacy';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<PlaylistConnection>;\n};\n\nexport type PlaylistAggregator = {\n  __typename?: 'PlaylistAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n  sum?: Maybe<PlaylistAggregatorSum>;\n  avg?: Maybe<PlaylistAggregatorAvg>;\n  min?: Maybe<PlaylistAggregatorMin>;\n  max?: Maybe<PlaylistAggregatorMax>;\n};\n\nexport type PlaylistAggregatorSum = {\n  __typename?: 'PlaylistAggregatorSum';\n  duration?: Maybe<Scalars['Float']>;\n  numTracks?: Maybe<Scalars['Float']>;\n};\n\nexport type PlaylistAggregatorAvg = {\n  __typename?: 'PlaylistAggregatorAvg';\n  duration?: Maybe<Scalars['Float']>;\n  numTracks?: Maybe<Scalars['Float']>;\n};\n\nexport type PlaylistAggregatorMin = {\n  __typename?: 'PlaylistAggregatorMin';\n  duration?: Maybe<Scalars['Float']>;\n  numTracks?: Maybe<Scalars['Float']>;\n};\n\nexport type PlaylistAggregatorMax = {\n  __typename?: 'PlaylistAggregatorMax';\n  duration?: Maybe<Scalars['Float']>;\n  numTracks?: Maybe<Scalars['Float']>;\n};\n\nexport type CreatePlaylistPayload = {\n  __typename?: 'createPlaylistPayload';\n  playlist?: Maybe<Playlist>;\n};\n\nexport type UpdatePlaylistPayload = {\n  __typename?: 'updatePlaylistPayload';\n  playlist?: Maybe<Playlist>;\n};\n\nexport type DeletePlaylistPayload = {\n  __typename?: 'deletePlaylistPayload';\n  playlist?: Maybe<Playlist>;\n};\n\nexport type TrackConnection = {\n  __typename?: 'TrackConnection';\n  values?: Maybe<Array<Maybe<Track>>>;\n  groupBy?: Maybe<TrackGroupBy>;\n  aggregate?: Maybe<TrackAggregator>;\n};\n\nexport type TrackGroupBy = {\n  __typename?: 'TrackGroupBy';\n  id?: Maybe<Array<Maybe<TrackConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<TrackConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<TrackConnectionUpdated_At>>>;\n  name?: Maybe<Array<Maybe<TrackConnectionName>>>;\n  explicit?: Maybe<Array<Maybe<TrackConnectionExplicit>>>;\n  duration?: Maybe<Array<Maybe<TrackConnectionDuration>>>;\n  album?: Maybe<Array<Maybe<TrackConnectionAlbum>>>;\n  trackNumber?: Maybe<Array<Maybe<TrackConnectionTrackNumber>>>;\n  discNumber?: Maybe<Array<Maybe<TrackConnectionDiscNumber>>>;\n  isPlayable?: Maybe<Array<Maybe<TrackConnectionIsPlayable>>>;\n  audio?: Maybe<Array<Maybe<TrackConnectionAudio>>>;\n};\n\nexport type TrackConnectionId = {\n  __typename?: 'TrackConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionCreated_At = {\n  __typename?: 'TrackConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionUpdated_At = {\n  __typename?: 'TrackConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionName = {\n  __typename?: 'TrackConnectionName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionExplicit = {\n  __typename?: 'TrackConnectionExplicit';\n  key?: Maybe<Scalars['Boolean']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionDuration = {\n  __typename?: 'TrackConnectionDuration';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionAlbum = {\n  __typename?: 'TrackConnectionAlbum';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionTrackNumber = {\n  __typename?: 'TrackConnectionTrackNumber';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionDiscNumber = {\n  __typename?: 'TrackConnectionDiscNumber';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionIsPlayable = {\n  __typename?: 'TrackConnectionIsPlayable';\n  key?: Maybe<Scalars['Boolean']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackConnectionAudio = {\n  __typename?: 'TrackConnectionAudio';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<TrackConnection>;\n};\n\nexport type TrackAggregator = {\n  __typename?: 'TrackAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n  sum?: Maybe<TrackAggregatorSum>;\n  avg?: Maybe<TrackAggregatorAvg>;\n  min?: Maybe<TrackAggregatorMin>;\n  max?: Maybe<TrackAggregatorMax>;\n};\n\nexport type TrackAggregatorSum = {\n  __typename?: 'TrackAggregatorSum';\n  duration?: Maybe<Scalars['Float']>;\n  trackNumber?: Maybe<Scalars['Float']>;\n  discNumber?: Maybe<Scalars['Float']>;\n};\n\nexport type TrackAggregatorAvg = {\n  __typename?: 'TrackAggregatorAvg';\n  duration?: Maybe<Scalars['Float']>;\n  trackNumber?: Maybe<Scalars['Float']>;\n  discNumber?: Maybe<Scalars['Float']>;\n};\n\nexport type TrackAggregatorMin = {\n  __typename?: 'TrackAggregatorMin';\n  duration?: Maybe<Scalars['Float']>;\n  trackNumber?: Maybe<Scalars['Float']>;\n  discNumber?: Maybe<Scalars['Float']>;\n};\n\nexport type TrackAggregatorMax = {\n  __typename?: 'TrackAggregatorMax';\n  duration?: Maybe<Scalars['Float']>;\n  trackNumber?: Maybe<Scalars['Float']>;\n  discNumber?: Maybe<Scalars['Float']>;\n};\n\nexport type CreateTrackPayload = {\n  __typename?: 'createTrackPayload';\n  track?: Maybe<Track>;\n};\n\nexport type UpdateTrackPayload = {\n  __typename?: 'updateTrackPayload';\n  track?: Maybe<Track>;\n};\n\nexport type DeleteTrackPayload = {\n  __typename?: 'deleteTrackPayload';\n  track?: Maybe<Track>;\n};\n\nexport type UploadFileConnection = {\n  __typename?: 'UploadFileConnection';\n  values?: Maybe<Array<Maybe<UploadFile>>>;\n  groupBy?: Maybe<UploadFileGroupBy>;\n  aggregate?: Maybe<UploadFileAggregator>;\n};\n\nexport type UploadFileGroupBy = {\n  __typename?: 'UploadFileGroupBy';\n  id?: Maybe<Array<Maybe<UploadFileConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<UploadFileConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<UploadFileConnectionUpdated_At>>>;\n  name?: Maybe<Array<Maybe<UploadFileConnectionName>>>;\n  alternativeText?: Maybe<Array<Maybe<UploadFileConnectionAlternativeText>>>;\n  caption?: Maybe<Array<Maybe<UploadFileConnectionCaption>>>;\n  width?: Maybe<Array<Maybe<UploadFileConnectionWidth>>>;\n  height?: Maybe<Array<Maybe<UploadFileConnectionHeight>>>;\n  formats?: Maybe<Array<Maybe<UploadFileConnectionFormats>>>;\n  hash?: Maybe<Array<Maybe<UploadFileConnectionHash>>>;\n  ext?: Maybe<Array<Maybe<UploadFileConnectionExt>>>;\n  mime?: Maybe<Array<Maybe<UploadFileConnectionMime>>>;\n  size?: Maybe<Array<Maybe<UploadFileConnectionSize>>>;\n  url?: Maybe<Array<Maybe<UploadFileConnectionUrl>>>;\n  previewUrl?: Maybe<Array<Maybe<UploadFileConnectionPreviewUrl>>>;\n  provider?: Maybe<Array<Maybe<UploadFileConnectionProvider>>>;\n  provider_metadata?: Maybe<Array<Maybe<UploadFileConnectionProvider_Metadata>>>;\n};\n\nexport type UploadFileConnectionId = {\n  __typename?: 'UploadFileConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionCreated_At = {\n  __typename?: 'UploadFileConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionUpdated_At = {\n  __typename?: 'UploadFileConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionName = {\n  __typename?: 'UploadFileConnectionName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionAlternativeText = {\n  __typename?: 'UploadFileConnectionAlternativeText';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionCaption = {\n  __typename?: 'UploadFileConnectionCaption';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionWidth = {\n  __typename?: 'UploadFileConnectionWidth';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionHeight = {\n  __typename?: 'UploadFileConnectionHeight';\n  key?: Maybe<Scalars['Int']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionFormats = {\n  __typename?: 'UploadFileConnectionFormats';\n  key?: Maybe<Scalars['JSON']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionHash = {\n  __typename?: 'UploadFileConnectionHash';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionExt = {\n  __typename?: 'UploadFileConnectionExt';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionMime = {\n  __typename?: 'UploadFileConnectionMime';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionSize = {\n  __typename?: 'UploadFileConnectionSize';\n  key?: Maybe<Scalars['Float']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionUrl = {\n  __typename?: 'UploadFileConnectionUrl';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionPreviewUrl = {\n  __typename?: 'UploadFileConnectionPreviewUrl';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionProvider = {\n  __typename?: 'UploadFileConnectionProvider';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileConnectionProvider_Metadata = {\n  __typename?: 'UploadFileConnectionProvider_metadata';\n  key?: Maybe<Scalars['JSON']>;\n  connection?: Maybe<UploadFileConnection>;\n};\n\nexport type UploadFileAggregator = {\n  __typename?: 'UploadFileAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n  sum?: Maybe<UploadFileAggregatorSum>;\n  avg?: Maybe<UploadFileAggregatorAvg>;\n  min?: Maybe<UploadFileAggregatorMin>;\n  max?: Maybe<UploadFileAggregatorMax>;\n};\n\nexport type UploadFileAggregatorSum = {\n  __typename?: 'UploadFileAggregatorSum';\n  width?: Maybe<Scalars['Float']>;\n  height?: Maybe<Scalars['Float']>;\n  size?: Maybe<Scalars['Float']>;\n};\n\nexport type UploadFileAggregatorAvg = {\n  __typename?: 'UploadFileAggregatorAvg';\n  width?: Maybe<Scalars['Float']>;\n  height?: Maybe<Scalars['Float']>;\n  size?: Maybe<Scalars['Float']>;\n};\n\nexport type UploadFileAggregatorMin = {\n  __typename?: 'UploadFileAggregatorMin';\n  width?: Maybe<Scalars['Float']>;\n  height?: Maybe<Scalars['Float']>;\n  size?: Maybe<Scalars['Float']>;\n};\n\nexport type UploadFileAggregatorMax = {\n  __typename?: 'UploadFileAggregatorMax';\n  width?: Maybe<Scalars['Float']>;\n  height?: Maybe<Scalars['Float']>;\n  size?: Maybe<Scalars['Float']>;\n};\n\nexport type UsersPermissionsRoleConnection = {\n  __typename?: 'UsersPermissionsRoleConnection';\n  values?: Maybe<Array<Maybe<UsersPermissionsRole>>>;\n  groupBy?: Maybe<UsersPermissionsRoleGroupBy>;\n  aggregate?: Maybe<UsersPermissionsRoleAggregator>;\n};\n\nexport type UsersPermissionsRoleGroupBy = {\n  __typename?: 'UsersPermissionsRoleGroupBy';\n  id?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionId>>>;\n  name?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionName>>>;\n  description?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionDescription>>>;\n  type?: Maybe<Array<Maybe<UsersPermissionsRoleConnectionType>>>;\n};\n\nexport type UsersPermissionsRoleConnectionId = {\n  __typename?: 'UsersPermissionsRoleConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<UsersPermissionsRoleConnection>;\n};\n\nexport type UsersPermissionsRoleConnectionName = {\n  __typename?: 'UsersPermissionsRoleConnectionName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsRoleConnection>;\n};\n\nexport type UsersPermissionsRoleConnectionDescription = {\n  __typename?: 'UsersPermissionsRoleConnectionDescription';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsRoleConnection>;\n};\n\nexport type UsersPermissionsRoleConnectionType = {\n  __typename?: 'UsersPermissionsRoleConnectionType';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsRoleConnection>;\n};\n\nexport type UsersPermissionsRoleAggregator = {\n  __typename?: 'UsersPermissionsRoleAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type CreateRolePayload = {\n  __typename?: 'createRolePayload';\n  role?: Maybe<UsersPermissionsRole>;\n};\n\nexport type UpdateRolePayload = {\n  __typename?: 'updateRolePayload';\n  role?: Maybe<UsersPermissionsRole>;\n};\n\nexport type DeleteRolePayload = {\n  __typename?: 'deleteRolePayload';\n  role?: Maybe<UsersPermissionsRole>;\n};\n\nexport type UsersPermissionsUserConnection = {\n  __typename?: 'UsersPermissionsUserConnection';\n  values?: Maybe<Array<Maybe<UsersPermissionsUser>>>;\n  groupBy?: Maybe<UsersPermissionsUserGroupBy>;\n  aggregate?: Maybe<UsersPermissionsUserAggregator>;\n};\n\nexport type UsersPermissionsUserGroupBy = {\n  __typename?: 'UsersPermissionsUserGroupBy';\n  id?: Maybe<Array<Maybe<UsersPermissionsUserConnectionId>>>;\n  created_at?: Maybe<Array<Maybe<UsersPermissionsUserConnectionCreated_At>>>;\n  updated_at?: Maybe<Array<Maybe<UsersPermissionsUserConnectionUpdated_At>>>;\n  username?: Maybe<Array<Maybe<UsersPermissionsUserConnectionUsername>>>;\n  email?: Maybe<Array<Maybe<UsersPermissionsUserConnectionEmail>>>;\n  provider?: Maybe<Array<Maybe<UsersPermissionsUserConnectionProvider>>>;\n  confirmed?: Maybe<Array<Maybe<UsersPermissionsUserConnectionConfirmed>>>;\n  blocked?: Maybe<Array<Maybe<UsersPermissionsUserConnectionBlocked>>>;\n  role?: Maybe<Array<Maybe<UsersPermissionsUserConnectionRole>>>;\n  firstName?: Maybe<Array<Maybe<UsersPermissionsUserConnectionFirstName>>>;\n  lastName?: Maybe<Array<Maybe<UsersPermissionsUserConnectionLastName>>>;\n};\n\nexport type UsersPermissionsUserConnectionId = {\n  __typename?: 'UsersPermissionsUserConnectionId';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionCreated_At = {\n  __typename?: 'UsersPermissionsUserConnectionCreated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionUpdated_At = {\n  __typename?: 'UsersPermissionsUserConnectionUpdated_at';\n  key?: Maybe<Scalars['DateTime']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionUsername = {\n  __typename?: 'UsersPermissionsUserConnectionUsername';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionEmail = {\n  __typename?: 'UsersPermissionsUserConnectionEmail';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionProvider = {\n  __typename?: 'UsersPermissionsUserConnectionProvider';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionConfirmed = {\n  __typename?: 'UsersPermissionsUserConnectionConfirmed';\n  key?: Maybe<Scalars['Boolean']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionBlocked = {\n  __typename?: 'UsersPermissionsUserConnectionBlocked';\n  key?: Maybe<Scalars['Boolean']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionRole = {\n  __typename?: 'UsersPermissionsUserConnectionRole';\n  key?: Maybe<Scalars['ID']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionFirstName = {\n  __typename?: 'UsersPermissionsUserConnectionFirstName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserConnectionLastName = {\n  __typename?: 'UsersPermissionsUserConnectionLastName';\n  key?: Maybe<Scalars['String']>;\n  connection?: Maybe<UsersPermissionsUserConnection>;\n};\n\nexport type UsersPermissionsUserAggregator = {\n  __typename?: 'UsersPermissionsUserAggregator';\n  count?: Maybe<Scalars['Int']>;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type CreateUserPayload = {\n  __typename?: 'createUserPayload';\n  user?: Maybe<UsersPermissionsUser>;\n};\n\nexport type UpdateUserPayload = {\n  __typename?: 'updateUserPayload';\n  user?: Maybe<UsersPermissionsUser>;\n};\n\nexport type DeleteUserPayload = {\n  __typename?: 'deleteUserPayload';\n  user?: Maybe<UsersPermissionsUser>;\n};\n\nexport enum Enum_Album_Releasetype {\n  Album = 'Album',\n  Ep = 'EP',\n  Lp = 'LP',\n  Podcast = 'Podcast',\n  Single = 'Single'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAlbum?: Maybe<CreateAlbumPayload>;\n  updateAlbum?: Maybe<UpdateAlbumPayload>;\n  deleteAlbum?: Maybe<DeleteAlbumPayload>;\n  createArtist?: Maybe<CreateArtistPayload>;\n  updateArtist?: Maybe<UpdateArtistPayload>;\n  deleteArtist?: Maybe<DeleteArtistPayload>;\n  createPlaylistTrack?: Maybe<CreatePlaylistTrackPayload>;\n  updatePlaylistTrack?: Maybe<UpdatePlaylistTrackPayload>;\n  deletePlaylistTrack?: Maybe<DeletePlaylistTrackPayload>;\n  createPlaylist?: Maybe<CreatePlaylistPayload>;\n  updatePlaylist?: Maybe<UpdatePlaylistPayload>;\n  deletePlaylist?: Maybe<DeletePlaylistPayload>;\n  createTrack?: Maybe<CreateTrackPayload>;\n  updateTrack?: Maybe<UpdateTrackPayload>;\n  deleteTrack?: Maybe<DeleteTrackPayload>;\n  /** Create a new role */\n  createRole?: Maybe<CreateRolePayload>;\n  /** Update an existing role */\n  updateRole?: Maybe<UpdateRolePayload>;\n  /** Delete an existing role */\n  deleteRole?: Maybe<DeleteRolePayload>;\n  /** Create a new user */\n  createUser?: Maybe<CreateUserPayload>;\n  /** Update an existing user */\n  updateUser?: Maybe<UpdateUserPayload>;\n  /** Delete an existing user */\n  deleteUser?: Maybe<DeleteUserPayload>;\n  upload: UploadFile;\n  multipleUpload: Array<Maybe<UploadFile>>;\n  login: UsersPermissionsLoginPayload;\n  register: UsersPermissionsLoginPayload;\n  forgotPassword?: Maybe<UserPermissionsPasswordPayload>;\n  resetPassword?: Maybe<UsersPermissionsLoginPayload>;\n  emailConfirmation?: Maybe<UsersPermissionsLoginPayload>;\n};\n\n\nexport type MutationCreateAlbumArgs = {\n  input?: Maybe<CreateAlbumInput>;\n};\n\n\nexport type MutationUpdateAlbumArgs = {\n  input?: Maybe<UpdateAlbumInput>;\n};\n\n\nexport type MutationDeleteAlbumArgs = {\n  input?: Maybe<DeleteAlbumInput>;\n};\n\n\nexport type MutationCreateArtistArgs = {\n  input?: Maybe<CreateArtistInput>;\n};\n\n\nexport type MutationUpdateArtistArgs = {\n  input?: Maybe<UpdateArtistInput>;\n};\n\n\nexport type MutationDeleteArtistArgs = {\n  input?: Maybe<DeleteArtistInput>;\n};\n\n\nexport type MutationCreatePlaylistTrackArgs = {\n  input?: Maybe<CreatePlaylistTrackInput>;\n};\n\n\nexport type MutationUpdatePlaylistTrackArgs = {\n  input?: Maybe<UpdatePlaylistTrackInput>;\n};\n\n\nexport type MutationDeletePlaylistTrackArgs = {\n  input?: Maybe<DeletePlaylistTrackInput>;\n};\n\n\nexport type MutationCreatePlaylistArgs = {\n  input?: Maybe<CreatePlaylistInput>;\n};\n\n\nexport type MutationUpdatePlaylistArgs = {\n  input?: Maybe<UpdatePlaylistInput>;\n};\n\n\nexport type MutationDeletePlaylistArgs = {\n  input?: Maybe<DeletePlaylistInput>;\n};\n\n\nexport type MutationCreateTrackArgs = {\n  input?: Maybe<CreateTrackInput>;\n};\n\n\nexport type MutationUpdateTrackArgs = {\n  input?: Maybe<UpdateTrackInput>;\n};\n\n\nexport type MutationDeleteTrackArgs = {\n  input?: Maybe<DeleteTrackInput>;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input?: Maybe<CreateRoleInput>;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input?: Maybe<UpdateRoleInput>;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input?: Maybe<DeleteRoleInput>;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input?: Maybe<CreateUserInput>;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input?: Maybe<UpdateUserInput>;\n};\n\n\nexport type MutationDeleteUserArgs = {\n  input?: Maybe<DeleteUserInput>;\n};\n\n\nexport type MutationUploadArgs = {\n  refId?: Maybe<Scalars['ID']>;\n  ref?: Maybe<Scalars['String']>;\n  field?: Maybe<Scalars['String']>;\n  source?: Maybe<Scalars['String']>;\n  file: Scalars['Upload'];\n};\n\n\nexport type MutationMultipleUploadArgs = {\n  refId?: Maybe<Scalars['ID']>;\n  ref?: Maybe<Scalars['String']>;\n  field?: Maybe<Scalars['String']>;\n  source?: Maybe<Scalars['String']>;\n  files: Array<Maybe<Scalars['Upload']>>;\n};\n\n\nexport type MutationLoginArgs = {\n  input: UsersPermissionsLoginInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: UsersPermissionsRegisterInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  code: Scalars['String'];\n};\n\n\nexport type MutationEmailConfirmationArgs = {\n  confirmation: Scalars['String'];\n};\n\nexport type CreateAlbumInput = {\n  data?: Maybe<AlbumInput>;\n};\n\nexport type AlbumInput = {\n  name?: Maybe<Scalars['String']>;\n  releaseDate?: Maybe<Scalars['Date']>;\n  artists?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  tracks?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  alias?: Maybe<Scalars['String']>;\n  artwork?: Maybe<Scalars['ID']>;\n  explicit?: Maybe<Scalars['Boolean']>;\n  releaseType?: Maybe<Enum_Album_Releasetype>;\n};\n\nexport type UpdateAlbumInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditAlbumInput>;\n};\n\nexport type InputId = {\n  id: Scalars['ID'];\n};\n\nexport type EditAlbumInput = {\n  name?: Maybe<Scalars['String']>;\n  releaseDate?: Maybe<Scalars['Date']>;\n  artists?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  tracks?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  alias?: Maybe<Scalars['String']>;\n  artwork?: Maybe<Scalars['ID']>;\n  explicit?: Maybe<Scalars['Boolean']>;\n  releaseType?: Maybe<Enum_Album_Releasetype>;\n};\n\nexport type DeleteAlbumInput = {\n  where?: Maybe<InputId>;\n};\n\nexport type CreateArtistInput = {\n  data?: Maybe<ArtistInput>;\n};\n\nexport type ArtistInput = {\n  name?: Maybe<Scalars['String']>;\n  alias?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['ID']>;\n  albums?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  featuresIn?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  tracks?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type UpdateArtistInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditArtistInput>;\n};\n\nexport type EditArtistInput = {\n  name?: Maybe<Scalars['String']>;\n  alias?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['ID']>;\n  albums?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  featuresIn?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  tracks?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type DeleteArtistInput = {\n  where?: Maybe<InputId>;\n};\n\nexport type CreatePlaylistTrackInput = {\n  data?: Maybe<PlaylistTrackInput>;\n};\n\nexport type PlaylistTrackInput = {\n  addedBy?: Maybe<Scalars['ID']>;\n  track?: Maybe<Scalars['ID']>;\n};\n\nexport type UpdatePlaylistTrackInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditPlaylistTrackInput>;\n};\n\nexport type EditPlaylistTrackInput = {\n  addedBy?: Maybe<Scalars['ID']>;\n  track?: Maybe<Scalars['ID']>;\n};\n\nexport type DeletePlaylistTrackInput = {\n  where?: Maybe<InputId>;\n};\n\nexport type CreatePlaylistInput = {\n  data?: Maybe<PlaylistInput>;\n};\n\nexport type PlaylistInput = {\n  alias?: Maybe<Scalars['String']>;\n  artwork?: Maybe<Scalars['ID']>;\n  collaborative?: Maybe<Scalars['Boolean']>;\n  creator?: Maybe<Scalars['ID']>;\n  description?: Maybe<Scalars['String']>;\n  duration?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  numTracks?: Maybe<Scalars['Int']>;\n  privacy?: Maybe<Privacy>;\n  tracks?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type UpdatePlaylistInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditPlaylistInput>;\n};\n\nexport type EditPlaylistInput = {\n  alias?: Maybe<Scalars['String']>;\n  artwork?: Maybe<Scalars['ID']>;\n  collaborative?: Maybe<Scalars['Boolean']>;\n  creator?: Maybe<Scalars['ID']>;\n  description?: Maybe<Scalars['String']>;\n  duration?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  numTracks?: Maybe<Scalars['Int']>;\n  privacy?: Maybe<Privacy>;\n  tracks?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type DeletePlaylistInput = {\n  where?: Maybe<InputId>;\n};\n\nexport type CreateTrackInput = {\n  data?: Maybe<TrackInput>;\n};\n\nexport type TrackInput = {\n  name?: Maybe<Scalars['String']>;\n  explicit?: Maybe<Scalars['Boolean']>;\n  duration?: Maybe<Scalars['Int']>;\n  album?: Maybe<Scalars['ID']>;\n  trackNumber?: Maybe<Scalars['Int']>;\n  discNumber?: Maybe<Scalars['Int']>;\n  isPlayable?: Maybe<Scalars['Boolean']>;\n  artists?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  featuring?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  audio?: Maybe<Scalars['ID']>;\n};\n\nexport type UpdateTrackInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditTrackInput>;\n};\n\nexport type EditTrackInput = {\n  name?: Maybe<Scalars['String']>;\n  explicit?: Maybe<Scalars['Boolean']>;\n  duration?: Maybe<Scalars['Int']>;\n  album?: Maybe<Scalars['ID']>;\n  trackNumber?: Maybe<Scalars['Int']>;\n  discNumber?: Maybe<Scalars['Int']>;\n  isPlayable?: Maybe<Scalars['Boolean']>;\n  artists?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  featuring?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  audio?: Maybe<Scalars['ID']>;\n};\n\nexport type DeleteTrackInput = {\n  where?: Maybe<InputId>;\n};\n\nexport type CreateRoleInput = {\n  data?: Maybe<RoleInput>;\n};\n\nexport type RoleInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  permissions?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  users?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type UpdateRoleInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditRoleInput>;\n};\n\nexport type EditRoleInput = {\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  permissions?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  users?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type DeleteRoleInput = {\n  where?: Maybe<InputId>;\n};\n\nexport type CreateUserInput = {\n  data?: Maybe<UserInput>;\n};\n\nexport type UserInput = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  provider?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  confirmed?: Maybe<Scalars['Boolean']>;\n  blocked?: Maybe<Scalars['Boolean']>;\n  role?: Maybe<Scalars['ID']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  playlists?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type UpdateUserInput = {\n  where?: Maybe<InputId>;\n  data?: Maybe<EditUserInput>;\n};\n\nexport type EditUserInput = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  provider?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  resetPasswordToken?: Maybe<Scalars['String']>;\n  confirmed?: Maybe<Scalars['Boolean']>;\n  blocked?: Maybe<Scalars['Boolean']>;\n  role?: Maybe<Scalars['ID']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  playlists?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type DeleteUserInput = {\n  where?: Maybe<InputId>;\n};\n\n\nexport type UsersPermissionsLoginInput = {\n  identifier: Scalars['String'];\n  password: Scalars['String'];\n  provider?: Maybe<Scalars['String']>;\n};\n\nexport type UsersPermissionsRegisterInput = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type FileInput = {\n  name: Scalars['String'];\n  alternativeText?: Maybe<Scalars['String']>;\n  caption?: Maybe<Scalars['String']>;\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n  formats?: Maybe<Scalars['JSON']>;\n  hash: Scalars['String'];\n  ext?: Maybe<Scalars['String']>;\n  mime: Scalars['String'];\n  size: Scalars['Float'];\n  url: Scalars['String'];\n  previewUrl?: Maybe<Scalars['String']>;\n  provider: Scalars['String'];\n  provider_metadata?: Maybe<Scalars['JSON']>;\n  related?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\nexport type EditFileInput = {\n  name?: Maybe<Scalars['String']>;\n  alternativeText?: Maybe<Scalars['String']>;\n  caption?: Maybe<Scalars['String']>;\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n  formats?: Maybe<Scalars['JSON']>;\n  hash?: Maybe<Scalars['String']>;\n  ext?: Maybe<Scalars['String']>;\n  mime?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  url?: Maybe<Scalars['String']>;\n  previewUrl?: Maybe<Scalars['String']>;\n  provider?: Maybe<Scalars['String']>;\n  provider_metadata?: Maybe<Scalars['JSON']>;\n  related?: Maybe<Array<Maybe<Scalars['ID']>>>;\n};\n\n\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type AlbumFragment = (\n  { __typename?: 'Album' }\n  & Pick<Album, 'id' | 'name'>\n  & { artwork?: Maybe<(\n    { __typename?: 'UploadFile' }\n    & Pick<UploadFile, 'url'>\n  )>, artists?: Maybe<Array<Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n  )>>>, tracks?: Maybe<Array<Maybe<(\n    { __typename?: 'Track' }\n    & TrackFragment\n  )>>> }\n);\n\nexport type ArtistFragment = (\n  { __typename?: 'Artist' }\n  & Pick<Artist, 'id' | 'name'>\n  & { avatar?: Maybe<(\n    { __typename?: 'UploadFile' }\n    & Pick<UploadFile, 'url'>\n  )> }\n);\n\nexport type TrackFragment = (\n  { __typename?: 'Track' }\n  & Pick<Track, 'id' | 'name' | 'duration' | 'trackNumber' | 'explicit'>\n  & { artists?: Maybe<Array<Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n  )>>>, featuring?: Maybe<Array<Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n  )>>>, album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id'>\n    & { artwork?: Maybe<(\n      { __typename?: 'UploadFile' }\n      & Pick<UploadFile, 'url'>\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { albums?: Maybe<Array<Maybe<(\n    { __typename?: 'Album' }\n    & AlbumFragment\n  )>>> }\n);\n\nexport type AlbumQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & AlbumFragment\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { artists?: Maybe<Array<Maybe<(\n    { __typename?: 'Artist' }\n    & ArtistFragment\n  )>>> }\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & ArtistFragment\n  )> }\n);\n\nexport type TracksQueryVariables = {\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type TracksQuery = (\n  { __typename?: 'Query' }\n  & { tracks?: Maybe<Array<Maybe<(\n    { __typename?: 'Track' }\n    & TrackFragment\n  )>>> }\n);\n\nexport type TrackQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type TrackQuery = (\n  { __typename?: 'Query' }\n  & { track?: Maybe<(\n    { __typename?: 'Track' }\n    & TrackFragment\n  )> }\n);\n\nexport const TrackFragmentDoc = gql`\n    fragment track on Track {\n  id\n  artists {\n    id\n    name\n  }\n  featuring {\n    id\n    name\n  }\n  name\n  duration\n  trackNumber\n  explicit\n  album {\n    id\n    artwork {\n      url\n    }\n  }\n}\n    `;\nexport const AlbumFragmentDoc = gql`\n    fragment album on Album {\n  id\n  name\n  artwork {\n    url\n  }\n  artists {\n    id\n    name\n  }\n  tracks {\n    ...track\n  }\n}\n    ${TrackFragmentDoc}`;\nexport const ArtistFragmentDoc = gql`\n    fragment artist on Artist {\n  id\n  name\n  avatar {\n    url\n  }\n}\n    `;\nexport const AlbumsDocument = gql`\n    query albums {\n  albums {\n    ...album\n  }\n}\n    ${AlbumFragmentDoc}`;\n\n/**\n * __useAlbumsQuery__\n *\n * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n      }\nexport function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n        }\nexport type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;\nexport type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const AlbumDocument = gql`\n    query album($id: ID!) {\n  album(id: $id) {\n    ...album\n  }\n}\n    ${AlbumFragmentDoc}`;\n\n/**\n * __useAlbumQuery__\n *\n * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n      }\nexport function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n        }\nexport type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;\nexport type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const ArtistsDocument = gql`\n    query artists($sort: String) {\n  artists(sort: $sort) {\n    ...artist\n  }\n}\n    ${ArtistFragmentDoc}`;\n\n/**\n * __useArtistsQuery__\n *\n * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistsQuery({\n *   variables: {\n *      sort: // value for 'sort'\n *   },\n * });\n */\nexport function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n      }\nexport function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n        }\nexport type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;\nexport type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;\nexport const ArtistDocument = gql`\n    query artist($id: ID!) {\n  artist(id: $id) {\n    ...artist\n  }\n}\n    ${ArtistFragmentDoc}`;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n      }\nexport function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n        }\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const TracksDocument = gql`\n    query tracks($sort: String) {\n  tracks(sort: $sort) {\n    ...track\n  }\n}\n    ${TrackFragmentDoc}`;\n\n/**\n * __useTracksQuery__\n *\n * To run a query within a React component, call `useTracksQuery` and pass it any options that fit your needs.\n * When your component renders, `useTracksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTracksQuery({\n *   variables: {\n *      sort: // value for 'sort'\n *   },\n * });\n */\nexport function useTracksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TracksQuery, TracksQueryVariables>) {\n        return ApolloReactHooks.useQuery<TracksQuery, TracksQueryVariables>(TracksDocument, baseOptions);\n      }\nexport function useTracksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TracksQuery, TracksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TracksQuery, TracksQueryVariables>(TracksDocument, baseOptions);\n        }\nexport type TracksQueryHookResult = ReturnType<typeof useTracksQuery>;\nexport type TracksLazyQueryHookResult = ReturnType<typeof useTracksLazyQuery>;\nexport type TracksQueryResult = ApolloReactCommon.QueryResult<TracksQuery, TracksQueryVariables>;\nexport const TrackDocument = gql`\n    query track($id: ID!) {\n  track(id: $id) {\n    ...track\n  }\n}\n    ${TrackFragmentDoc}`;\n\n/**\n * __useTrackQuery__\n *\n * To run a query within a React component, call `useTrackQuery` and pass it any options that fit your needs.\n * When your component renders, `useTrackQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTrackQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTrackQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TrackQuery, TrackQueryVariables>) {\n        return ApolloReactHooks.useQuery<TrackQuery, TrackQueryVariables>(TrackDocument, baseOptions);\n      }\nexport function useTrackLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TrackQuery, TrackQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TrackQuery, TrackQueryVariables>(TrackDocument, baseOptions);\n        }\nexport type TrackQueryHookResult = ReturnType<typeof useTrackQuery>;\nexport type TrackLazyQueryHookResult = ReturnType<typeof useTrackLazyQuery>;\nexport type TrackQueryResult = ApolloReactCommon.QueryResult<TrackQuery, TrackQueryVariables>;","import { useSpring } from \"react-spring\";\n\nexport const useAnimations = () => {\n  const useFadeIn = useSpring({ opacity: 1, from: { opacity: 0 } });\n\n  const useFadeUp = useSpring({\n    from: { opacity: 0, transform: \"translateY(32px)\" },\n    to: { opacity: 1, transform: \"translateY(0px\" }\n  });\n\n  return { useFadeIn, useFadeUp };\n};\n","import { useLocalStorage, useSessionStorage } from '@paisidevs/tra-hooks';\nimport React, { FC, useEffect, useState } from 'react';\nimport { COGNITO_USER_STORAGE_KEY } from '../constants';\n\ntype CognitoUser = {\n  accessToken: string;\n  attributes: {\n    id: string;\n    // TODO: Provide correct types\n    [attribute: string]: any;\n  };\n};\n\ntype ContextType = {\n  authenticating: boolean;\n  cognitoUser: CognitoUser;\n  isAuthenticated: boolean;\n  forgotPassword: (email: string) => void;\n  resetPassword: (\n    code: string,\n    password: string,\n    passwordConfirmation: string,\n  ) => void;\n  signIn: (email: string, password: string, rememberMe: boolean) => void;\n  signUp: (username: string, email: string, password: string) => void;\n  signOut: () => void;\n};\n\nconst DEFAULT_STATE = {\n  authenticating: true,\n  isAuthenticated: false,\n  cognitoUser: {} as CognitoUser,\n  forgotPassword: (_email: string) => {},\n  resetPassword: (\n    _code: string,\n    _password: string,\n    _passwordConfirmation: string,\n  ) => {},\n  signIn: (_email: string, _password: string, _rememberMe: boolean) => {},\n  signUp: (_username: string, _email: string, _password: string) => {},\n  signOut: () => {},\n};\n\nexport const Context = React.createContext<ContextType>(DEFAULT_STATE);\n\nconst Provider: FC = ({ children }) => {\n  const [localUser] = useLocalStorage(COGNITO_USER_STORAGE_KEY);\n  const [sessionUser] = useSessionStorage(COGNITO_USER_STORAGE_KEY);\n  const [cognitoUser] = useState(sessionUser || localUser);\n\n  const [authenticating, setAuthenticating] = useState(\n    DEFAULT_STATE.authenticating,\n  );\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    DEFAULT_STATE.isAuthenticated,\n  );\n\n  const forgotPassword = async (email: string) => {\n    try {\n      // Logic goes here\n    } catch (error) {\n      // Error handling goes here\n    }\n  };\n\n  const resetPassword = async (\n    code: string,\n    password: string,\n    passwordConfirmation: string,\n  ) => {\n    try {\n      // Logic goes here\n\n      setIsAuthenticated(true);\n    } catch (error) {\n      // Error handling goes here\n    }\n  };\n\n  const signIn = async (\n    username: string,\n    password: string,\n    rememberMe: boolean = false,\n  ) => {\n    try {\n      setAuthenticating(true);\n\n      // Logic goes here\n\n      setIsAuthenticated(true);\n    } catch (error) {\n      // Error handling goes here\n    } finally {\n      setAuthenticating(false);\n    }\n  };\n\n  const signUp = async (username: string, email: string, password: string) => {\n    try {\n      // Logic goes here\n\n      setIsAuthenticated(true);\n    } catch (error) {\n      // Error handling goes here\n    }\n  };\n\n  const signOut = () => {\n    // clearLocalUser();\n    // clearSessionUser();\n    setIsAuthenticated(false);\n  };\n\n  useEffect(() => {\n    if (cognitoUser) {\n      setIsAuthenticated(true);\n    } else {\n      setIsAuthenticated(false);\n    }\n    setAuthenticating(false);\n  }, [cognitoUser]);\n\n  return (\n    <Context.Provider\n      value={{\n        authenticating,\n        cognitoUser,\n        forgotPassword,\n        isAuthenticated,\n        resetPassword,\n        signIn,\n        signOut,\n        signUp,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default Provider;\n","import {\n  Animated,\n  Box,\n  Grid,\n  Image,\n  ScrollView,\n  Text,\n} from \"@paisidevs/tra-components\";\nimport {} from \"@paisidevs/tra-hooks\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\nimport Truncate from \"react-truncate\";\nimport { useAlbumsQuery } from \"../../generated/graphql\";\nimport { useAnimations } from \"../../hooks\";\nimport { reduceArtists } from \"../../utilities\";\n\nconst Albums: React.FC = () => {\n  const { useFadeUp } = useAnimations();\n  const { data } = useAlbumsQuery({ fetchPolicy: \"cache-and-network\" });\n\n  return (\n    <ScrollView>\n      <Helmet>\n        <title>the-beats-app - Built with love by @paisidevs</title>\n      </Helmet>\n      <Animated style={useFadeUp}>\n        <Grid\n          gridTemplateColumns={[\"repeat(2, 1fr)\", \"repeat(4, 1fr)\"]}\n          gridGap={[2, 4]}\n          padding={[2, 4]}\n          width=\"100%\"\n        >\n          {data?.albums?.map((album) => (\n            <Link key={album?.id} to={`/library/albums/${album?.id}`}>\n              <Image\n                aspect={1}\n                src={\"http://localhost:1337\" + album?.artwork?.url}\n              />\n              <Box\n                alignItems=\"center\"\n                backgroundColor=\"background.base\"\n                padding={2}\n                width=\"100%\"\n              >\n                <Text fontSize={[1, 2]} textAlign=\"center\" width=\"100%\">\n                  <Truncate lines={1}>{album?.name}</Truncate>\n                </Text>\n                <Text\n                  fontSize={[0, 1]}\n                  opacity={0.65}\n                  textAlign=\"center\"\n                  width=\"100%\"\n                >\n                  <Truncate lines={1}>{reduceArtists(album?.artists)}</Truncate>\n                </Text>\n              </Box>\n            </Link>\n          ))}\n        </Grid>\n      </Animated>\n    </ScrollView>\n  );\n};\n\nexport default Albums;\n","import {\n  Animated,\n  Box,\n  Grid,\n  Image,\n  ScrollView,\n  Text,\n} from \"@paisidevs/tra-components\";\nimport {} from \"@paisidevs/tra-hooks\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\nimport { useArtistsQuery } from \"../../generated/graphql\";\nimport { useAnimations } from \"../../hooks\";\n\nconst Artists: React.FC = () => {\n  const { useFadeUp } = useAnimations();\n  const { data } = useArtistsQuery({\n    fetchPolicy: \"cache-and-network\",\n    variables: { sort: \"alias:asc\" },\n  });\n\n  return (\n    <ScrollView>\n      <Helmet>\n        <title>the-beats-app - Built with love by @paisidevs</title>\n      </Helmet>\n      <Animated style={useFadeUp}>\n        <Grid\n          gridTemplateColumns={[\"repeat(2, 1fr)\", \"repeat(4, 1fr)\"]}\n          gridGap={[2, 4]}\n          padding={[2, 4]}\n          width=\"100%\"\n        >\n          {data?.artists?.map((artist) => (\n            <Link key={artist?.id} to={`/library/artists/${artist?.id}`}>\n              <Image\n                aspect={1}\n                src={\"http://localhost:1337\" + artist?.avatar?.url}\n              />\n              <Box\n                alignItems=\"center\"\n                backgroundColor=\"background.base\"\n                padding={2}\n              >\n                <Text fontSize={[1, 2]}>{artist?.name}</Text>\n              </Box>\n            </Link>\n          ))}\n        </Grid>\n      </Animated>\n    </ScrollView>\n  );\n};\n\nexport default Artists;\n","import { Box, H2, ScrollView } from \"@paisidevs/tra-components\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\n\nconst Home: React.FC = () => {\n  const links = [\n    { label: \"Playlists\", to: \"/library/playlists\" },\n    { label: \"Artists\", to: \"/library/artists\" },\n    { label: \"Albums\", to: \"/library/albums\" },\n    { label: \"Songs\", to: \"/library/songs\" },\n  ];\n\n  return (\n    <ScrollView>\n      <Helmet>\n        <title>the-beats-app - Built with love by @paisidevs</title>\n      </Helmet>\n      <Box padding={2}>\n        <H2 fontSize={[6, 7]} margin={0} marginBottom={2}>\n          Library\n        </H2>\n        {links.map(({ label, to }, index) => (\n          <Link key={index} to={to}>\n            <Box\n              borderBottom={1}\n              borderTop={index === 0 ? 1 : 0}\n              borderColor=\"border.default\"\n              paddingY={2}\n            >\n              {label}\n            </Box>\n          </Link>\n        ))}\n      </Box>\n    </ScrollView>\n  );\n};\n\nexport default Home;\n","import { H1 } from '@paisidevs/tra-components';\nimport React, { FC } from 'react';\n\nconst NotFound: FC = () => {\n  return <H1>NotFound</H1>;\n};\n\nexport default NotFound;\n","import { Box, Form, ScrollView, Text } from \"@paisidevs/tra-components\";\nimport React from \"react\";\nimport { ChevronDown } from \"react-feather\";\nimport { Helmet } from \"react-helmet\";\n\nconst Playlists: React.FC = () => {\n  const regex = /{{\\s*?[a-z]*\\s*?}}/g;\n  const template =\n    \"The statemanager is a utility class that wraps around the base {{subject}} and each Select variant to expose inputValue and value as {{school}} props. For more detailed information on these props and their usage please see the controlled props section of the advanced page.\";\n  const expressions = template\n    .match(regex)\n    ?.map((expression) => expression.replace(/{{|}}/g, \"\").trim());\n  const templateParts = template.split(regex);\n\n  const placeholder = {\n    subject: \"United Federation of Planets option is not specified\",\n    school: \"Updating package configuration\",\n  };\n\n  const renderPitch = () => {\n    let pitch: any[] = [];\n\n    templateParts.forEach((part, index) => {\n      pitch.push(<Text key={\"text-\" + index}>{part}</Text>);\n      if (expressions?.[index]) {\n        // @ts-ignore\n        const expression = placeholder[expressions[index]];\n\n        pitch.push(\n          <Text\n            key={\"expression-\" + index}\n            backgroundColor=\"primary.base\"\n            color=\"text.onPrimary\"\n            style={{ cursor: \"pointer\" }}\n            padding=\"2px 4px\"\n          >\n            {expression} <ChevronDown size={12} />\n          </Text>\n        );\n      }\n    });\n\n    return pitch;\n  };\n\n  return (\n    <ScrollView>\n      <Helmet>\n        <title>the-beats-app - Built with love by @paisidevs</title>\n      </Helmet>\n      <Form name=\"pitch\" initialValues={{}} onSubmit={() => null}>\n        <Box display=\"block\" padding={2}>\n          {renderPitch()}\n        </Box>\n      </Form>\n    </ScrollView>\n  );\n};\n\nexport default Playlists;\n","import {\n  Animated,\n  Box,\n  Flex,\n  Image,\n  ScrollView,\n  Text,\n} from \"@paisidevs/tra-components\";\nimport React, { FC } from \"react\";\nimport Truncate from \"react-truncate\";\nimport { useTracksQuery } from \"../../generated/graphql\";\nimport { useAnimations } from \"../../hooks\";\nimport { reduceArtists } from \"../../utilities\";\n\nconst Songs: FC = () => {\n  const { useFadeUp } = useAnimations();\n  const { data } = useTracksQuery({\n    fetchPolicy: \"cache-and-network\",\n    variables: { sort: \"name:asc\" },\n  });\n\n  return (\n    <ScrollView>\n      <Animated style={useFadeUp} width=\"100%\">\n        {data?.tracks?.map((track, index) => (\n          <Box key={track?.id} paddingX={2}>\n            <Box\n              borderBottom={\n                data?.tracks && index === data.tracks.length - 1 ? 0 : 1\n              }\n              borderColor=\"border.default\"\n              flexDirection=\"row\"\n              paddingY={1}\n              width=\"100%\"\n            >\n              <Box flex=\"none\" size={40} marginRight={1}>\n                <Image\n                  aspect={1}\n                  src={\"http://localhost:1337\" + track?.album?.artwork?.url}\n                />\n              </Box>\n              <Box flex={1}>\n                <Flex alignItems=\"center\">\n                  <Text fontSize={2} width=\"100%\">\n                    <Truncate lines={1}>\n                      {track?.name}\n                      {track?.featuring && track.featuring.length > 0 && (\n                        <React.Fragment>\n                          {\" (feat. \"}\n                          {reduceArtists(track.featuring)}\n                          {\")\"}\n                        </React.Fragment>\n                      )}\n                    </Truncate>\n                  </Text>\n                  {track?.explicit && (\n                    <Box\n                      backgroundColor=\"text.default\"\n                      color=\"text.onPrimary\"\n                      fontSize={0}\n                      fontWeight={600}\n                      lineHeight={1}\n                      marginLeft=\"4px\"\n                      padding=\"2px\"\n                      paddingBottom=\"0.5px\"\n                      paddingLeft=\"3px\"\n                      paddingRight=\"3px\"\n                    >\n                      E\n                    </Box>\n                  )}\n                </Flex>\n                <Text fontSize={1} opacity={0.65} width=\"100%\">\n                  <Truncate lines={1}>\n                    {track?.artists && track.artists.length > 0 && (\n                      <React.Fragment>\n                        {reduceArtists(track.artists)}\n                      </React.Fragment>\n                    )}\n                  </Truncate>\n                </Text>\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </Animated>\n    </ScrollView>\n  );\n};\n\nexport default Songs;\n","import {\n  Animated,\n  Box,\n  Flex,\n  Grid,\n  H3,\n  Image,\n  ScrollView,\n  Text,\n} from \"@paisidevs/tra-components\";\nimport React, { FC } from \"react\";\nimport { RouteComponentProps, useParams } from \"react-router-dom\";\nimport Truncate from \"react-truncate\";\nimport { useAlbumQuery } from \"../../generated/graphql\";\nimport { useAnimations } from \"../../hooks\";\nimport { reduceArtists } from \"../../utilities\";\n\nexport const AlbumBreadcrumb: FC<RouteComponentProps<{ id: string }>> = ({\n  match: { params },\n}) => {\n  const { data } = useAlbumQuery({ variables: { id: params.id } });\n\n  return <React.Fragment>{data?.album?.name}</React.Fragment>;\n};\n\nexport const Explicit = () => (\n  <Box\n    alignItems=\"center\"\n    backgroundColor=\"text.default\"\n    color=\"text.onPrimary\"\n    fontSize={0}\n    fontWeight={600}\n    height={11}\n    justifyContent=\"center\"\n    letterSpacing=\"0.05em\"\n    lineHeight={1}\n    marginLeft=\"4px\"\n    position=\"absolute\"\n    right={0}\n    top=\"4px\"\n    width={12}\n  >\n    E\n  </Box>\n);\n\nconst ViewAlbum: FC = () => {\n  const { useFadeIn, useFadeUp } = useAnimations();\n  const { id } = useParams<{ id: string }>();\n  const { data } = useAlbumQuery({ variables: { id } });\n\n  const album = data?.album;\n  const artists = album?.artists || [];\n  const tracks = album?.tracks || [];\n\n  return (\n    <ScrollView>\n      <Animated padding={2} style={useFadeIn}>\n        <Grid gridTemplateColumns=\"5fr 7fr\" gridGap={2} width=\"100%\">\n          <Box flex=\"none\">\n            <Image\n              aspect={1}\n              src={\"http://localhost:1337\" + album?.artwork?.url}\n            />\n          </Box>\n          <Box flex={1}>\n            <H3 fontSize={[4, 5]} fontWeight={500} margin={0}>\n              <Truncate lines={3}>{album?.name}</Truncate>\n            </H3>\n            <Text lineHeight={1.5}>\n              <Truncate lines={1}>{reduceArtists(artists)}</Truncate>\n            </Text>\n          </Box>\n        </Grid>\n      </Animated>\n      <Animated style={useFadeUp} width=\"100%\">\n        {tracks.map((track, index) => (\n          <Box key={track?.id} paddingX={2}>\n            <Box\n              borderBottom={index === tracks.length - 1 ? 0 : 1}\n              borderColor=\"border.default\"\n              flexDirection=\"row\"\n              paddingY={1}\n              width=\"100%\"\n            >\n              <Box\n                flex=\"none\"\n                fontSize={2}\n                justifyContent=\"center\"\n                size={40}\n                marginRight={1}\n                opacity={0.65}\n                paddingX={1}\n                textAlign=\"right\"\n              >\n                {track?.trackNumber || index + 1}\n              </Box>\n              <Box flex={1}>\n                <Flex\n                  alignItems=\"center\"\n                  paddingRight={track?.explicit ? 2 : 0}\n                >\n                  <Text fontSize={2} width=\"100%\">\n                    <Truncate lines={1}>\n                      {track?.name}\n                      {track?.featuring && track.featuring.length > 0 && (\n                        <React.Fragment>\n                          {\" (feat. \"}\n                          {reduceArtists(track.featuring)}\n                          {\")\"}\n                        </React.Fragment>\n                      )}\n                    </Truncate>\n                    {track?.explicit && <Explicit />}\n                  </Text>\n                </Flex>\n                <Text fontSize={1} opacity={0.65} width=\"100%\">\n                  <Truncate lines={1}>\n                    {track?.artists &&\n                      track.artists.length > 0 &&\n                      reduceArtists(track.artists)}\n                  </Truncate>\n                </Text>\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </Animated>\n    </ScrollView>\n  );\n};\n\nexport default ViewAlbum;\n","import { Albums, Artists, Home, NotFound, Playlists, Songs } from \"../../pages\";\nimport ViewAlbum, { AlbumBreadcrumb } from \"../ViewAlbum\";\n\nexport const routes: any = [\n  {\n    exact: true,\n    component: Home,\n    path: \"/\",\n    title: \"Library\",\n    breadcrumb: \"Library\",\n  },\n  {\n    exact: true,\n    component: Playlists,\n    path: \"/library/playlists\",\n    title: \"Playlists\",\n    breadcrumb: \"Playlists\",\n  },\n  {\n    exact: true,\n    component: Artists,\n    path: \"/library/artists\",\n    title: \"Artists\",\n    breadcrumb: \"Artists\",\n  },\n  {\n    exact: true,\n    component: Albums,\n    path: \"/library/albums\",\n    title: \"Albums\",\n    breadcrumb: \"Albums\",\n  },\n  {\n    exact: true,\n    component: ViewAlbum,\n    path: \"/library/albums/:id\",\n    breadcrumb: AlbumBreadcrumb,\n  },\n  {\n    exact: true,\n    component: Songs,\n    path: \"/library/songs\",\n    title: \"Songs\",\n    breadcrumb: \"Songs\",\n  },\n  {\n    path: \"*\",\n    component: NotFound,\n  },\n];\n","import { Animated, Box } from \"@paisidevs/tra-components\";\nimport React from \"react\";\nimport { ArrowLeft } from \"react-feather\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTransition } from \"react-spring\";\n\n// import { makeDebugger } from '../../utils';\n// const debug = makeDebugger('GoBackButton');\n\ninterface IGoBackButtonProps {\n  show?: boolean;\n}\n\n/**\n * @render react\n * @name GoBackButton component\n * @description GoBackButton component.\n * @example\n * <GoBackButton />\n */\n\nconst GoBackButton = ({ show }: IGoBackButtonProps) => {\n  const history = useHistory();\n\n  const backButtonTrans = useTransition(show, null, {\n    from: { opacity: 0, transform: \"translateX(-64px)\" },\n    enter: { opacity: 1, transform: \"translateX(0)\" },\n    leave: { opacity: 0, transform: \"translateX(-64px)\" },\n  });\n\n  return (\n    <Box width=\"auto\">\n      {backButtonTrans.map(\n        ({ item, key, props: styleProps }) =>\n          item && (\n            <Animated\n              key={key}\n              style={styleProps}\n              onClick={() => history.goBack()}\n            >\n              <ArrowLeft />\n            </Animated>\n          )\n      )}\n    </Box>\n  );\n};\n\nexport default GoBackButton;\n","import { Box, Flex, H1, Text } from \"@paisidevs/tra-components\";\nimport React, { FC } from \"react\";\nimport { Search } from \"react-feather\";\nimport Truncate from \"react-truncate\";\nimport useBreadcrumbs from \"use-react-router-breadcrumbs\";\nimport { routes } from \"../../containers/App/routes\";\nimport GoBackButton from \"../GoBackButton\";\n\n/**\n * @render react\n * @name Header component\n * @description Header component.\n * @example\n * <Header />\n */\n\nconst Header: FC = ({ ...props }) => {\n  const breadcrumbs = useBreadcrumbs(routes);\n  const slicedBreadcrumbs = breadcrumbs.slice(1);\n  const title = slicedBreadcrumbs[slicedBreadcrumbs.length - 2]?.breadcrumb;\n  const subtitle = slicedBreadcrumbs[slicedBreadcrumbs.length - 1]?.breadcrumb;\n\n  return (\n    <Box as=\"header\" justifyContent=\"center\" flex=\"none\" {...props}>\n      <Flex>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          flex=\"none\"\n          minWidth={64}\n        >\n          <GoBackButton show={slicedBreadcrumbs.length > 0} />\n        </Flex>\n        <Flex justifyContent=\"center\" flex={1} flexDirection=\"column\">\n          <Text fontSize={[1, 2]} margin={0}>\n            {title}\n          </Text>\n          <H1 fontSize={[4, 5]} margin={0}>\n            <Truncate lines={1}>{subtitle}</Truncate>\n          </H1>\n        </Flex>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          flex=\"none\"\n          minWidth={64}\n        >\n          <Search />\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nHeader.defaultProps = {\n  backgroundColor: \"background.surface\",\n  height: [64, 88],\n};\n\nexport default Header;\n","import { Box } from '@paisidevs/tra-components';\nimport { keyframes, styled } from '@paisidevs/tra-theme';\n\nconst spin = keyframes`\n  0% { transform: rotate(0deg) }\n  100% { transform: rotate(360deg) }\n`;\n\nexport const Outer = styled(Box)`\n  animation: ${spin} 10s linear infinite;\n\n  .a-oval {\n    &:first-of-type {\n      transform: rotate(-120deg);\n    }\n    &:last-of-type {\n      transform: rotate(120deg);\n    }\n  }\n`;\n","import { Box, ErrorBoundary, Grid, Routes } from \"@paisidevs/tra-components\";\nimport { Global, ThemeProvider } from \"@paisidevs/tra-theme\";\nimport React, { FC } from \"react\";\nimport { Header } from \"../../components\";\nimport { routes } from \"./routes\";\n\nconst App: FC = () => {\n  const renderApp = () => {\n    return (\n      <React.Fragment>\n        <ErrorBoundary>\n          <Header />\n        </ErrorBoundary>\n        <Box height=\"100%\" overflow=\"hidden\">\n          <ErrorBoundary>\n            <Routes routes={routes} />\n          </ErrorBoundary>\n        </Box>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <ThemeProvider>\n      <Grid\n        backgroundColor=\"background.surface\"\n        color=\"text.default\"\n        gridTemplateRows=\"64px 1fr\"\n        height=\"100%\"\n        overflow=\"hidden\"\n      >\n        <Global />\n        {renderApp()}\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React, { FC } from 'react';\nimport AuthenticationProvider from './AuthenticationProvider.context';\n\nexport const AppProvider: FC = ({ children }) => {\n  return <AuthenticationProvider>{children}</AuthenticationProvider>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ApolloClient,\n  ApolloProvider,\n  NormalizedCacheObject,\n} from \"@paisidevs/tra-apollo\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"typeface-roboto\";\nimport { client, persistedClient } from \"./apollo.config\";\nimport App from \"./containers/App\";\nimport { AppProvider } from \"./contexts\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst renderApp = (client: ApolloClient<NormalizedCacheObject>) =>\n  ReactDOM.render(\n    <ApolloProvider client={client}>\n      <Router>\n        <AppProvider>\n          <App />\n        </AppProvider>\n      </Router>\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n  );\n\npersistedClient()\n  .then((client) => renderApp(client))\n  .catch(() => renderApp(client));\n\n// Persist \"debug\" package's enable state in localStorage\nif (process.env.NODE_ENV !== \"production\") {\n  window.localStorage.setItem(\"debug\", \"tra:*\");\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}