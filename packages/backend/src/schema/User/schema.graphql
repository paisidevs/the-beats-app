enum Role {
  ADMIN
  SUBSCRIBER
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  email: String!
  firstName: String
  lastName: String
  playlists: [Playlist]
  role: Role
  username: String!
  verified: Boolean!
}

type CognitoUserAttributes {
  email: String!
  firstName: String
  lastName: String
  role: Role!
  username: String
  verified: Boolean!
}

type CognitoUser {
  id: ID!
  accessToken: String!
  attributes: CognitoUserAttributes!
}

input CreateUserInput {
  email: String!
  password: String!
  role: Role
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: NonEmptyString
  lastName: NonEmptyString
  role: Role
}

type Query {
  user(id: ID!): User
  users: [User]
}

type Mutation {
  createUser(input: CreateUserInput!): CognitoUser!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): User
  authenticateUser(input: LoginUserInput!): CognitoUser!
}
